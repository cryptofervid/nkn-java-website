"use strict";(self.webpackChunknkn_java_website=self.webpackChunknkn_java_website||[]).push([[962],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(t),d=i,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return t?r.createElement(g,a(a({ref:n},p),{},{components:t})):r.createElement(g,a({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,a=new Array(s);a[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var c=2;c<s;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3205:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var r=t(7462),i=t(3366),s=(t(7294),t(3905)),a=["components"],o={sidebar_position:1},l="Simple Message Exchange",c={unversionedId:"simpleexchange_example",id:"simpleexchange_example",isDocsHomePage:!1,title:"Simple Message Exchange",description:"This example walks through the following scenarios:",source:"@site/docs/simpleexchange_example.md",sourceDirName:".",slug:"/simpleexchange_example",permalink:"/nkn-java-website/docs/simpleexchange_example",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/simpleexchange_example.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"environment_sidebar",previous:{title:"Wallet Setup and Transaction",permalink:"/nkn-java-website/docs/wallet_example"},next:{title:"Session Establishment and Data Exchange",permalink:"/nkn-java-website/docs/session_example"}},p=[{value:"Setup Client(s) for listening to incoming messages",id:"setup-clients-for-listening-to-incoming-messages",children:[]},{value:"Send and Receive Messages",id:"send-and-receive-messages",children:[]}],u={toc:p};function m(e){var n=e.components,t=(0,i.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"simple-message-exchange"},"Simple Message Exchange"),(0,s.kt)("p",null,"This example walks through the following scenarios:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Create client(s)"),(0,s.kt)("li",{parentName:"ul"},"Listen for incoming messages"),(0,s.kt)("li",{parentName:"ul"},"Sending Text Messages"),(0,s.kt)("li",{parentName:"ul"},"Sending Binary Messages")),(0,s.kt)("h2",{id:"setup-clients-for-listening-to-incoming-messages"},"Setup Client(s) for listening to incoming messages"),(0,s.kt)("p",null,"Create clients and configure them to listen to incoming messages. configure other connection parameters as required:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'final Identity identityA = new Identity("Client A", Wallet.createNew());\nfinal Identity identityB = new Identity("Client B", Wallet.createNew());\n\nfinal NKNClient clientA = new NKNClient(identityA);\ntry {\n    clientA.simpleMessagesProtocol()\n            .onNewMessage(receivedMessage -> {\n                if (receivedMessage.isText) {\n                    System.out.println("Client A: New " + (receivedMessage.wasEncrypted ? "encrypted" : "UNENCRYPTED") + " text from " + receivedMessage.from + "\\n  ==> " + receivedMessage.textData);\n                } else if (receivedMessage.isBinary) {\n                    System.out.println("Client A: New " + (receivedMessage.wasEncrypted ? "encrypted" : "UNENCRYPTED") + " binary from " + receivedMessage.from + "\\n  ==> 0x" + Hex.toHexString(receivedMessage.binaryData.toByteArray()).toUpperCase());\n                }\n            });\n    clientA.start();\n} catch (NKNClientException e) {\n    LOG.error("Client failed to start:", e);\n    return;\n}\n\nfinal NKNClient clientB = new NKNClient(identityB);\ntry {\n    clientB.simpleMessagesProtocol()\n            .onNewMessageWithReply(receivedMessage -> {\n                if (receivedMessage.isText) {\n                    System.out.println("Client B: New " + (receivedMessage.wasEncrypted ? "encrypted" : "UNENCRYPTED") + " text from " + receivedMessage.from + "\\n  ==> " + receivedMessage.textData);\n                } else if (receivedMessage.isBinary) {\n                    System.out.println("Client B: New " + (receivedMessage.wasEncrypted ? "encrypted" : "UNENCRYPTED") + " binary from " + receivedMessage.from + "\\n  ==> 0x" + Hex.toHexString(receivedMessage.binaryData.toByteArray()).toUpperCase());\n                }\n                return "Text message reply!";\n            });\n    clientB\n            .setEncryptionLevel(NKNClient.EncryptionLevel.DO_NOT_ENCRYPT)\n            .start();\n} catch (NKNClientException e) {\n    LOG.error("Client failed to start", e);\n    return;\n}\n\nSystem.out.println("Started!");\n')),(0,s.kt)("h2",{id:"send-and-receive-messages"},"Send and Receive Messages"),(0,s.kt)("p",null,"Send and Receive messages from Client A to Client B and vice versa. The messages are sent in a loop to demonstrate continuous interaction."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'final CompletableFuture<SimpleMessagesProtocol.ReceivedMessage> promise = clientA.simpleMessagesProtocol().sendTextAsync(identityB.getFullIdentifier(), "Hello!");\npromise.whenComplete((response, error) -> {\n    if (error == null) {\n        System.out.println("A: " + (response.wasEncrypted ? "Encrypted" : "UNENCRYPTED") + " response ==> " + response.textData);\n        clientA.simpleMessagesProtocol().sendBinaryAsync(identityB.getFullIdentifier(), null, new byte[]{(byte) 0xCA, (byte) 0xFE, (byte) 0xBA, (byte) 0xBE}); // Casts because java (byte) is signed and these numbers would overwrite the msb\n    } else {\n        error.printStackTrace();\n    }\n});\n\nfor (int number = 0; number < 10; number ++) {\n    Thread.sleep(5_000);\n    clientA.simpleMessagesProtocol().sendTextAsync(identityB.getFullIdentifier(), "Message #" + number);\n}\n\nThread.sleep(7_000);\n\nSystem.out.println("Closing!");\nclientA.close();\nclientB.close();\n')))}m.isMDXComponent=!0}}]);