"use strict";(self.webpackChunknkn_java_website=self.webpackChunknkn_java_website||[]).push([[720],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,f=d["".concat(o,".").concat(m)]||d[m]||p[m]||s;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7490:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(7462),i=n(3366),s=(n(7294),n(3905)),a=["components"],l={sidebar_position:1},o="Multicast Message Exchange",c={unversionedId:"multicast_example",id:"multicast_example",isDocsHomePage:!1,title:"Multicast Message Exchange",description:"This example walks through the following scenarios:",source:"@site/docs/multicast_example.md",sourceDirName:".",slug:"/multicast_example",permalink:"/nkn-java-website/docs/multicast_example",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/multicast_example.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"environment_sidebar",previous:{title:"Session Establishment and Data Exchange",permalink:"/nkn-java-website/docs/session_example"},next:{title:"Publish Subscribe Message Exchange",permalink:"/nkn-java-website/docs/pubsub_example"}},u=[{value:"Create client(s)",id:"create-clients",children:[{value:"Send multicast message",id:"send-multicast-message",children:[]},{value:"Process Responses",id:"process-responses",children:[]},{value:"Close client(s)",id:"close-clients",children:[]}]}],p={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"multicast-message-exchange"},"Multicast Message Exchange"),(0,s.kt)("p",null,"This example walks through the following scenarios:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Create Client(s)"),(0,s.kt)("li",{parentName:"ul"},"Send multicast message"),(0,s.kt)("li",{parentName:"ul"},"Wait for and process Ack(s)"),(0,s.kt)("li",{parentName:"ul"},"Teardown the clients")),(0,s.kt)("h2",{id:"create-clients"},"Create client(s)"),(0,s.kt)("p",null,"Create one message producing client and 3 message consuming clients."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'final Identity identitySender = new Identity("Sender", Wallet.createNew());\nfinal Identity identityA = new Identity("A", Wallet.createNew());\nfinal Identity identityB = new Identity("B", Wallet.createNew());\nfinal Identity identityC = new Identity("C", Wallet.createNew());\n\nLOG.info("Initializing clients");\n\nfinal NKNClient clientSender = new NKNClient(identitySender);\nclientSender.simpleMessagesProtocol()\n        .onNewMessage(receivedMessage -> {\n            if (receivedMessage.isText) {\n                System.out.println("Sender: New text from " + receivedMessage.from + "\\n  ==> " + receivedMessage.textData);\n            } else if (receivedMessage.isBinary) {\n                System.out.println("Sender: New binary from " + receivedMessage.from + "\\n  ==> 0x" + Hex.toHexString(receivedMessage.binaryData.toByteArray()).toUpperCase());\n            }\n        });\nclientSender.start();\n\n// These will just reply with ACK\nfinal NKNClient clientA = new NKNClient(identityA).start();\nfinal NKNClient clientB = new NKNClient(identityB).start();\nfinal NKNClient clientC = new NKNClient(identityC).start();\n\nLOG.info("All clients ready, broadcasting");\n\n')),(0,s.kt)("h3",{id:"send-multicast-message"},"Send multicast message"),(0,s.kt)("p",null,"Send a multicast message to all the client addresses."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'final List<CompletableFuture<SimpleMessagesProtocol.ReceivedMessage>> promises = clientSender.simpleMessagesProtocol().sendTextMulticastAsync(new String[] {\n        identityA.getFullIdentifier(),\n        identityB.getFullIdentifier(),\n        identityC.getFullIdentifier()\n}, "Hello!");\n')),(0,s.kt)("h3",{id:"process-responses"},"Process Responses"),(0,s.kt)("p",null,"Process the incoming Acks from the clients."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'promises.forEach(p -> p.whenComplete((response, error) -> {\n    if (error == null) {\n        System.out.println("Response from " + response.from);\n        System.out.println("  ==> " + (response.isAck ? "[ACK]" : response.isText ? response.textData : ("0x" + Hex.toHexString(response.binaryData.toByteArray()).toUpperCase())));\n    } else {\n        System.out.println("Error: " + error.toString());\n    }\n}));\n')),(0,s.kt)("h3",{id:"close-clients"},"Close client(s)"),(0,s.kt)("p",null,"Close the clients once the communication is complete"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'Thread.sleep(7_000);\n\nLOG.info("Closing all clients");\n\nclientSender.close();\nclientA.close();\nclientB.close();\nclientC.close();\n')))}d.isMDXComponent=!0}}]);